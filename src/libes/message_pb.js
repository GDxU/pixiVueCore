// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.pb.Bomb', null, global);
goog.exportSymbol('proto.pb.BombTag', null, global);
goog.exportSymbol('proto.pb.Constants', null, global);
goog.exportSymbol('proto.pb.DropItem', null, global);
goog.exportSymbol('proto.pb.DropTag', null, global);
goog.exportSymbol('proto.pb.Map', null, global);
goog.exportSymbol('proto.pb.Message', null, global);
goog.exportSymbol('proto.pb.Message.ContentCase', null, global);
goog.exportSymbol('proto.pb.PStatus', null, global);
goog.exportSymbol('proto.pb.Ping', null, global);
goog.exportSymbol('proto.pb.Player', null, global);
goog.exportSymbol('proto.pb.PlayerControl', null, global);
goog.exportSymbol('proto.pb.PlayerDetail', null, global);
goog.exportSymbol('proto.pb.Pong', null, global);
goog.exportSymbol('proto.pb.Sex', null, global);
goog.exportSymbol('proto.pb.SnapshotData', null, global);
goog.exportSymbol('proto.pb.Space', null, global);
goog.exportSymbol('proto.pb.Spawn', null, global);
goog.exportSymbol('proto.pb.Tile', null, global);
goog.exportSymbol('proto.pb.TileStatus', null, global);
goog.exportSymbol('proto.pb.UserInput', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Ping.displayName = 'proto.pb.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Pong.displayName = 'proto.pb.Pong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Bomb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Bomb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Bomb.displayName = 'proto.pb.Bomb';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.DropItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.DropItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.DropItem.displayName = 'proto.pb.DropItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Map.repeatedFields_, null);
};
goog.inherits(proto.pb.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Map.displayName = 'proto.pb.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TileStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TileStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TileStatus.displayName = 'proto.pb.TileStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Player.displayName = 'proto.pb.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PlayerControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PlayerControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PlayerControl.displayName = 'proto.pb.PlayerControl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Spawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Spawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Spawn.displayName = 'proto.pb.Spawn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PlayerDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.PlayerDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PlayerDetail.displayName = 'proto.pb.PlayerDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.SnapshotData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.SnapshotData.repeatedFields_, null);
};
goog.inherits(proto.pb.SnapshotData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.SnapshotData.displayName = 'proto.pb.SnapshotData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Space = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Space.repeatedFields_, null);
};
goog.inherits(proto.pb.Space, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Space.displayName = 'proto.pb.Space';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Constants = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Constants.repeatedFields_, null);
};
goog.inherits(proto.pb.Constants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Constants.displayName = 'proto.pb.Constants';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pb.Message.oneofGroups_);
};
goog.inherits(proto.pb.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Message.displayName = 'proto.pb.Message';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Ping}
 */
proto.pb.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Ping;
  return proto.pb.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Ping}
 */
proto.pb.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Id = 1;
 * @return {number}
 */
proto.pb.Ping.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Ping} returns this
 */
proto.pb.Ping.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Pong}
 */
proto.pb.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Pong;
  return proto.pb.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Pong}
 */
proto.pb.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 Id = 1;
 * @return {number}
 */
proto.pb.Pong.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Pong} returns this
 */
proto.pb.Pong.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Bomb.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Bomb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Bomb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Bomb.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeplaced: (f = msg.getTimeplaced()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    timetrigger: (f = msg.getTimetrigger()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fusetime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    strength: jspb.Message.getFieldWithDefault(msg, 6, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 7, 0),
    bombclass: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Bomb}
 */
proto.pb.Bomb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Bomb;
  return proto.pb.Bomb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Bomb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Bomb}
 */
proto.pb.Bomb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeplaced(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimetrigger(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFusetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStrength(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOwner(value);
      break;
    case 8:
      var value = /** @type {!proto.pb.BombTag} */ (reader.readEnum());
      msg.setBombclass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Bomb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Bomb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Bomb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Bomb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimeplaced();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimetrigger();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFusetime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOwner();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getBombclass();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.pb.Bomb.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.pb.Bomb.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timePlaced = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pb.Bomb.prototype.getTimeplaced = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pb.Bomb} returns this
*/
proto.pb.Bomb.prototype.setTimeplaced = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.clearTimeplaced = function() {
  return this.setTimeplaced(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Bomb.prototype.hasTimeplaced = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp timeTrigger = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pb.Bomb.prototype.getTimetrigger = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pb.Bomb} returns this
*/
proto.pb.Bomb.prototype.setTimetrigger = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.clearTimetrigger = function() {
  return this.setTimetrigger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Bomb.prototype.hasTimetrigger = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 fuseTime = 5;
 * @return {number}
 */
proto.pb.Bomb.prototype.getFusetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setFusetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 strength = 6;
 * @return {number}
 */
proto.pb.Bomb.prototype.getStrength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setStrength = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 owner = 7;
 * @return {number}
 */
proto.pb.Bomb.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setOwner = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional BombTag bombClass = 8;
 * @return {!proto.pb.BombTag}
 */
proto.pb.Bomb.prototype.getBombclass = function() {
  return /** @type {!proto.pb.BombTag} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.pb.BombTag} value
 * @return {!proto.pb.Bomb} returns this
 */
proto.pb.Bomb.prototype.setBombclass = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.DropItem.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.DropItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.DropItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DropItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeplaced: (f = msg.getTimeplaced()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lifetime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    killable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    itemclass: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.DropItem}
 */
proto.pb.DropItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.DropItem;
  return proto.pb.DropItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.DropItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.DropItem}
 */
proto.pb.DropItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeplaced(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLifetime(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKillable(value);
      break;
    case 8:
      var value = /** @type {!proto.pb.DropTag} */ (reader.readEnum());
      msg.setItemclass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.DropItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.DropItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.DropItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.DropItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTimeplaced();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLifetime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getKillable();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getItemclass();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.pb.DropItem.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.pb.DropItem.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timePlaced = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pb.DropItem.prototype.getTimeplaced = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pb.DropItem} returns this
*/
proto.pb.DropItem.prototype.setTimeplaced = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.clearTimeplaced = function() {
  return this.setTimeplaced(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.DropItem.prototype.hasTimeplaced = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 lifeTime = 5;
 * @return {number}
 */
proto.pb.DropItem.prototype.getLifetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.setLifetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool killable = 7;
 * @return {boolean}
 */
proto.pb.DropItem.prototype.getKillable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.setKillable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional DropTag itemClass = 8;
 * @return {!proto.pb.DropTag}
 */
proto.pb.DropItem.prototype.getItemclass = function() {
  return /** @type {!proto.pb.DropTag} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.pb.DropTag} value
 * @return {!proto.pb.DropItem} returns this
 */
proto.pb.DropItem.prototype.setItemclass = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Map.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tilesdataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Map}
 */
proto.pb.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Map;
  return proto.pb.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Map}
 */
proto.pb.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.pb.Tile>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTilesdata(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTilesdataList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 width = 1;
 * @return {number}
 */
proto.pb.Map.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Map} returns this
 */
proto.pb.Map.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.pb.Map.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Map} returns this
 */
proto.pb.Map.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Tile tilesData = 3;
 * @return {!Array<!proto.pb.Tile>}
 */
proto.pb.Map.prototype.getTilesdataList = function() {
  return /** @type {!Array<!proto.pb.Tile>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.pb.Tile>} value
 * @return {!proto.pb.Map} returns this
 */
proto.pb.Map.prototype.setTilesdataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.pb.Tile} value
 * @param {number=} opt_index
 * @return {!proto.pb.Map} returns this
 */
proto.pb.Map.prototype.addTilesdata = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Map} returns this
 */
proto.pb.Map.prototype.clearTilesdataList = function() {
  return this.setTilesdataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TileStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TileStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TileStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TileStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    newtilestatus: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TileStatus}
 */
proto.pb.TileStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TileStatus;
  return proto.pb.TileStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TileStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TileStatus}
 */
proto.pb.TileStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.Tile} */ (reader.readEnum());
      msg.setNewtilestatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TileStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TileStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TileStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TileStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNewtilestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.pb.TileStatus.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TileStatus} returns this
 */
proto.pb.TileStatus.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y = 2;
 * @return {number}
 */
proto.pb.TileStatus.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TileStatus} returns this
 */
proto.pb.TileStatus.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Tile newTileStatus = 3;
 * @return {!proto.pb.Tile}
 */
proto.pb.TileStatus.prototype.getNewtilestatus = function() {
  return /** @type {!proto.pb.Tile} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.pb.Tile} value
 * @return {!proto.pb.TileStatus} returns this
 */
proto.pb.TileStatus.prototype.setNewtilestatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 5, 0),
    x: jspb.Message.getFieldWithDefault(msg, 6, 0),
    y: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tiledX: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tiledY: jspb.Message.getFieldWithDefault(msg, 9, 0),
    health: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Player}
 */
proto.pb.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Player;
  return proto.pb.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Player}
 */
proto.pb.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTiledX(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTiledY(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHealth(value);
      break;
    case 11:
      var value = /** @type {!proto.pb.PStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getTiledX();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTiledY();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional bool alive = 1;
 * @return {boolean}
 */
proto.pb.Player.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pb.Player.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pb.Player} returns this
*/
proto.pb.Player.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Player.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 id = 5;
 * @return {number}
 */
proto.pb.Player.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 x = 6;
 * @return {number}
 */
proto.pb.Player.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 y = 7;
 * @return {number}
 */
proto.pb.Player.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 tiled_x = 8;
 * @return {number}
 */
proto.pb.Player.prototype.getTiledX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setTiledX = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 tiled_y = 9;
 * @return {number}
 */
proto.pb.Player.prototype.getTiledY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setTiledY = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 health = 10;
 * @return {number}
 */
proto.pb.Player.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setHealth = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional PStatus status = 11;
 * @return {!proto.pb.PStatus}
 */
proto.pb.Player.prototype.getStatus = function() {
  return /** @type {!proto.pb.PStatus} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.pb.PStatus} value
 * @return {!proto.pb.Player} returns this
 */
proto.pb.Player.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PlayerControl.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PlayerControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PlayerControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userinput: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PlayerControl}
 */
proto.pb.PlayerControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PlayerControl;
  return proto.pb.PlayerControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PlayerControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PlayerControl}
 */
proto.pb.PlayerControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.UserInput} */ (reader.readEnum());
      msg.setUserinput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PlayerControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PlayerControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PlayerControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserinput();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.PlayerControl.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PlayerControl} returns this
 */
proto.pb.PlayerControl.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.pb.PlayerControl.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PlayerControl} returns this
 */
proto.pb.PlayerControl.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.pb.PlayerControl.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PlayerControl} returns this
 */
proto.pb.PlayerControl.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UserInput userInput = 6;
 * @return {!proto.pb.UserInput}
 */
proto.pb.PlayerControl.prototype.getUserinput = function() {
  return /** @type {!proto.pb.UserInput} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pb.UserInput} value
 * @return {!proto.pb.PlayerControl} returns this
 */
proto.pb.PlayerControl.prototype.setUserinput = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Spawn.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Spawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Spawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Spawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    spawnafter: (f = msg.getSpawnafter()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    spawnX: jspb.Message.getFieldWithDefault(msg, 2, 0),
    spawnY: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Spawn}
 */
proto.pb.Spawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Spawn;
  return proto.pb.Spawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Spawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Spawn}
 */
proto.pb.Spawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setSpawnafter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpawnX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpawnY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Spawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Spawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Spawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Spawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpawnafter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getSpawnX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSpawnY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Duration spawnAfter = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.pb.Spawn.prototype.getSpawnafter = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.pb.Spawn} returns this
*/
proto.pb.Spawn.prototype.setSpawnafter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Spawn} returns this
 */
proto.pb.Spawn.prototype.clearSpawnafter = function() {
  return this.setSpawnafter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Spawn.prototype.hasSpawnafter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 spawn_x = 2;
 * @return {number}
 */
proto.pb.Spawn.prototype.getSpawnX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Spawn} returns this
 */
proto.pb.Spawn.prototype.setSpawnX = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 spawn_y = 3;
 * @return {number}
 */
proto.pb.Spawn.prototype.getSpawnY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Spawn} returns this
 */
proto.pb.Spawn.prototype.setSpawnY = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PlayerDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PlayerDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PlayerDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    character: jspb.Message.getFieldWithDefault(msg, 3, ""),
    score: jspb.Message.getFieldWithDefault(msg, 4, 0),
    walletAddr: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    spawninfo: (f = msg.getSpawninfo()) && proto.pb.Spawn.toObject(includeInstance, f),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PlayerDetail}
 */
proto.pb.PlayerDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PlayerDetail;
  return proto.pb.PlayerDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PlayerDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PlayerDetail}
 */
proto.pb.PlayerDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletAddr(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.Sex} */ (reader.readEnum());
      msg.setSex(value);
      break;
    case 7:
      var value = /** @type {!proto.pb.PStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = new proto.pb.Spawn;
      reader.readMessage(value,proto.pb.Spawn.deserializeBinaryFromReader);
      msg.setSpawninfo(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PlayerDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PlayerDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PlayerDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PlayerDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCharacter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getWalletAddr();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSex();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSpawninfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pb.Spawn.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pb.PlayerDetail.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.PlayerDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string character = 3;
 * @return {string}
 */
proto.pb.PlayerDetail.prototype.getCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 score = 4;
 * @return {number}
 */
proto.pb.PlayerDetail.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string wallet_addr = 5;
 * @return {string}
 */
proto.pb.PlayerDetail.prototype.getWalletAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setWalletAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Sex sex = 6;
 * @return {!proto.pb.Sex}
 */
proto.pb.PlayerDetail.prototype.getSex = function() {
  return /** @type {!proto.pb.Sex} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pb.Sex} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setSex = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional PStatus status = 7;
 * @return {!proto.pb.PStatus}
 */
proto.pb.PlayerDetail.prototype.getStatus = function() {
  return /** @type {!proto.pb.PStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.pb.PStatus} value
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Spawn spawnInfo = 8;
 * @return {?proto.pb.Spawn}
 */
proto.pb.PlayerDetail.prototype.getSpawninfo = function() {
  return /** @type{?proto.pb.Spawn} */ (
    jspb.Message.getWrapperField(this, proto.pb.Spawn, 8));
};


/**
 * @param {?proto.pb.Spawn|undefined} value
 * @return {!proto.pb.PlayerDetail} returns this
*/
proto.pb.PlayerDetail.prototype.setSpawninfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.clearSpawninfo = function() {
  return this.setSpawninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PlayerDetail.prototype.hasSpawninfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pb.PlayerDetail.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pb.PlayerDetail} returns this
*/
proto.pb.PlayerDetail.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.PlayerDetail} returns this
 */
proto.pb.PlayerDetail.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.PlayerDetail.prototype.hasTime = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.SnapshotData.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.SnapshotData.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SnapshotData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.SnapshotData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SnapshotData.toObject = function(includeInstance, msg) {
  var f, obj = {
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    proto.pb.PlayerDetail.toObject, includeInstance),
    posList: jspb.Message.toObjectList(msg.getPosList(),
    proto.pb.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.SnapshotData}
 */
proto.pb.SnapshotData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SnapshotData;
  return proto.pb.SnapshotData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.SnapshotData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SnapshotData}
 */
proto.pb.SnapshotData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.PlayerDetail;
      reader.readMessage(value,proto.pb.PlayerDetail.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    case 2:
      var value = new proto.pb.Player;
      reader.readMessage(value,proto.pb.Player.deserializeBinaryFromReader);
      msg.addPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.SnapshotData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SnapshotData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.SnapshotData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SnapshotData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.PlayerDetail.serializeBinaryToWriter
    );
  }
  f = message.getPosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.Player.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerDetail details = 1;
 * @return {!Array<!proto.pb.PlayerDetail>}
 */
proto.pb.SnapshotData.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.pb.PlayerDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.PlayerDetail, 1));
};


/**
 * @param {!Array<!proto.pb.PlayerDetail>} value
 * @return {!proto.pb.SnapshotData} returns this
*/
proto.pb.SnapshotData.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.PlayerDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.PlayerDetail}
 */
proto.pb.SnapshotData.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.PlayerDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.SnapshotData} returns this
 */
proto.pb.SnapshotData.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};


/**
 * repeated Player pos = 2;
 * @return {!Array<!proto.pb.Player>}
 */
proto.pb.SnapshotData.prototype.getPosList = function() {
  return /** @type{!Array<!proto.pb.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Player, 2));
};


/**
 * @param {!Array<!proto.pb.Player>} value
 * @return {!proto.pb.SnapshotData} returns this
*/
proto.pb.SnapshotData.prototype.setPosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Player}
 */
proto.pb.SnapshotData.prototype.addPos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.SnapshotData} returns this
 */
proto.pb.SnapshotData.prototype.clearPosList = function() {
  return this.setPosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Space.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Space.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Space.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Space} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Space.toObject = function(includeInstance, msg) {
  var f, obj = {
    physicsframeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bombsignal: (f = msg.getBombsignal()) && proto.pb.Bomb.toObject(includeInstance, f),
    items: (f = msg.getItems()) && proto.pb.DropItem.toObject(includeInstance, f),
    tiledataList: jspb.Message.toObjectList(msg.getTiledataList(),
    proto.pb.TileStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Space}
 */
proto.pb.Space.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Space;
  return proto.pb.Space.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Space} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Space}
 */
proto.pb.Space.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhysicsframeid(value);
      break;
    case 2:
      var value = new proto.pb.Bomb;
      reader.readMessage(value,proto.pb.Bomb.deserializeBinaryFromReader);
      msg.setBombsignal(value);
      break;
    case 3:
      var value = new proto.pb.DropItem;
      reader.readMessage(value,proto.pb.DropItem.deserializeBinaryFromReader);
      msg.setItems(value);
      break;
    case 4:
      var value = new proto.pb.TileStatus;
      reader.readMessage(value,proto.pb.TileStatus.deserializeBinaryFromReader);
      msg.addTiledata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Space.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Space.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Space} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Space.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhysicsframeid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBombsignal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Bomb.serializeBinaryToWriter
    );
  }
  f = message.getItems();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.DropItem.serializeBinaryToWriter
    );
  }
  f = message.getTiledataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.TileStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 physicsFrameID = 1;
 * @return {number}
 */
proto.pb.Space.prototype.getPhysicsframeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Space} returns this
 */
proto.pb.Space.prototype.setPhysicsframeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Bomb bombSignal = 2;
 * @return {?proto.pb.Bomb}
 */
proto.pb.Space.prototype.getBombsignal = function() {
  return /** @type{?proto.pb.Bomb} */ (
    jspb.Message.getWrapperField(this, proto.pb.Bomb, 2));
};


/**
 * @param {?proto.pb.Bomb|undefined} value
 * @return {!proto.pb.Space} returns this
*/
proto.pb.Space.prototype.setBombsignal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Space} returns this
 */
proto.pb.Space.prototype.clearBombsignal = function() {
  return this.setBombsignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Space.prototype.hasBombsignal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DropItem items = 3;
 * @return {?proto.pb.DropItem}
 */
proto.pb.Space.prototype.getItems = function() {
  return /** @type{?proto.pb.DropItem} */ (
    jspb.Message.getWrapperField(this, proto.pb.DropItem, 3));
};


/**
 * @param {?proto.pb.DropItem|undefined} value
 * @return {!proto.pb.Space} returns this
*/
proto.pb.Space.prototype.setItems = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Space} returns this
 */
proto.pb.Space.prototype.clearItems = function() {
  return this.setItems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Space.prototype.hasItems = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TileStatus tileData = 4;
 * @return {!Array<!proto.pb.TileStatus>}
 */
proto.pb.Space.prototype.getTiledataList = function() {
  return /** @type{!Array<!proto.pb.TileStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.TileStatus, 4));
};


/**
 * @param {!Array<!proto.pb.TileStatus>} value
 * @return {!proto.pb.Space} returns this
*/
proto.pb.Space.prototype.setTiledataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.TileStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.TileStatus}
 */
proto.pb.Space.prototype.addTiledata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.TileStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Space} returns this
 */
proto.pb.Space.prototype.clearTiledataList = function() {
  return this.setTiledataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Constants.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Constants.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Constants.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Constants} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Constants.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundwidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    boundheight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    resourcesMapList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    fps: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Constants}
 */
proto.pb.Constants.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Constants;
  return proto.pb.Constants.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Constants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Constants}
 */
proto.pb.Constants.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoundwidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoundheight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addResourcesMap(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Constants.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Constants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Constants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Constants.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundwidth();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getBoundheight();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getResourcesMapList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional float boundWidth = 1;
 * @return {number}
 */
proto.pb.Constants.prototype.getBoundwidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.setBoundwidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float boundHeight = 2;
 * @return {number}
 */
proto.pb.Constants.prototype.getBoundheight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.setBoundheight = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated string resources_map = 3;
 * @return {!Array<string>}
 */
proto.pb.Constants.prototype.getResourcesMapList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.setResourcesMapList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.addResourcesMap = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.clearResourcesMapList = function() {
  return this.setResourcesMapList([]);
};


/**
 * optional uint32 fps = 4;
 * @return {number}
 */
proto.pb.Constants.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Constants} returns this
 */
proto.pb.Constants.prototype.setFps = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pb.Message.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.pb.Message.ContentCase = {
  CONTENT_NOT_SET: 0,
  PONG: 1,
  DETAILS: 2,
  NEWBOMB: 3,
  SNAPSHOT: 4,
  CONTROL: 5,
  MAPSPACE: 6,
  CONFIG: 7,
  REALTIME: 8
};

/**
 * @return {proto.pb.Message.ContentCase}
 */
proto.pb.Message.prototype.getContentCase = function() {
  return /** @type {proto.pb.Message.ContentCase} */(jspb.Message.computeOneofCase(this, proto.pb.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    pong: (f = msg.getPong()) && proto.pb.Pong.toObject(includeInstance, f),
    details: (f = msg.getDetails()) && proto.pb.PlayerDetail.toObject(includeInstance, f),
    newbomb: (f = msg.getNewbomb()) && proto.pb.Bomb.toObject(includeInstance, f),
    snapshot: (f = msg.getSnapshot()) && proto.pb.SnapshotData.toObject(includeInstance, f),
    control: (f = msg.getControl()) && proto.pb.PlayerControl.toObject(includeInstance, f),
    mapspace: (f = msg.getMapspace()) && proto.pb.Space.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.pb.Constants.toObject(includeInstance, f),
    realtime: (f = msg.getRealtime()) && proto.pb.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Message}
 */
proto.pb.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Message;
  return proto.pb.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Message}
 */
proto.pb.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Pong;
      reader.readMessage(value,proto.pb.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 2:
      var value = new proto.pb.PlayerDetail;
      reader.readMessage(value,proto.pb.PlayerDetail.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    case 3:
      var value = new proto.pb.Bomb;
      reader.readMessage(value,proto.pb.Bomb.deserializeBinaryFromReader);
      msg.setNewbomb(value);
      break;
    case 4:
      var value = new proto.pb.SnapshotData;
      reader.readMessage(value,proto.pb.SnapshotData.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 5:
      var value = new proto.pb.PlayerControl;
      reader.readMessage(value,proto.pb.PlayerControl.deserializeBinaryFromReader);
      msg.setControl(value);
      break;
    case 6:
      var value = new proto.pb.Space;
      reader.readMessage(value,proto.pb.Space.deserializeBinaryFromReader);
      msg.setMapspace(value);
      break;
    case 7:
      var value = new proto.pb.Constants;
      reader.readMessage(value,proto.pb.Constants.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 8:
      var value = new proto.pb.Player;
      reader.readMessage(value,proto.pb.Player.deserializeBinaryFromReader);
      msg.setRealtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Pong.serializeBinaryToWriter
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.PlayerDetail.serializeBinaryToWriter
    );
  }
  f = message.getNewbomb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Bomb.serializeBinaryToWriter
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb.SnapshotData.serializeBinaryToWriter
    );
  }
  f = message.getControl();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pb.PlayerControl.serializeBinaryToWriter
    );
  }
  f = message.getMapspace();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.Space.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pb.Constants.serializeBinaryToWriter
    );
  }
  f = message.getRealtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.pb.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pong pong = 1;
 * @return {?proto.pb.Pong}
 */
proto.pb.Message.prototype.getPong = function() {
  return /** @type{?proto.pb.Pong} */ (
    jspb.Message.getWrapperField(this, proto.pb.Pong, 1));
};


/**
 * @param {?proto.pb.Pong|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setPong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasPong = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayerDetail details = 2;
 * @return {?proto.pb.PlayerDetail}
 */
proto.pb.Message.prototype.getDetails = function() {
  return /** @type{?proto.pb.PlayerDetail} */ (
    jspb.Message.getWrapperField(this, proto.pb.PlayerDetail, 2));
};


/**
 * @param {?proto.pb.PlayerDetail|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Bomb newBomb = 3;
 * @return {?proto.pb.Bomb}
 */
proto.pb.Message.prototype.getNewbomb = function() {
  return /** @type{?proto.pb.Bomb} */ (
    jspb.Message.getWrapperField(this, proto.pb.Bomb, 3));
};


/**
 * @param {?proto.pb.Bomb|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setNewbomb = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearNewbomb = function() {
  return this.setNewbomb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasNewbomb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SnapshotData snapshot = 4;
 * @return {?proto.pb.SnapshotData}
 */
proto.pb.Message.prototype.getSnapshot = function() {
  return /** @type{?proto.pb.SnapshotData} */ (
    jspb.Message.getWrapperField(this, proto.pb.SnapshotData, 4));
};


/**
 * @param {?proto.pb.SnapshotData|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PlayerControl control = 5;
 * @return {?proto.pb.PlayerControl}
 */
proto.pb.Message.prototype.getControl = function() {
  return /** @type{?proto.pb.PlayerControl} */ (
    jspb.Message.getWrapperField(this, proto.pb.PlayerControl, 5));
};


/**
 * @param {?proto.pb.PlayerControl|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setControl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearControl = function() {
  return this.setControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasControl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Space mapspace = 6;
 * @return {?proto.pb.Space}
 */
proto.pb.Message.prototype.getMapspace = function() {
  return /** @type{?proto.pb.Space} */ (
    jspb.Message.getWrapperField(this, proto.pb.Space, 6));
};


/**
 * @param {?proto.pb.Space|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setMapspace = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearMapspace = function() {
  return this.setMapspace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasMapspace = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Constants config = 7;
 * @return {?proto.pb.Constants}
 */
proto.pb.Message.prototype.getConfig = function() {
  return /** @type{?proto.pb.Constants} */ (
    jspb.Message.getWrapperField(this, proto.pb.Constants, 7));
};


/**
 * @param {?proto.pb.Constants|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Player realtime = 8;
 * @return {?proto.pb.Player}
 */
proto.pb.Message.prototype.getRealtime = function() {
  return /** @type{?proto.pb.Player} */ (
    jspb.Message.getWrapperField(this, proto.pb.Player, 8));
};


/**
 * @param {?proto.pb.Player|undefined} value
 * @return {!proto.pb.Message} returns this
*/
proto.pb.Message.prototype.setRealtime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.pb.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Message} returns this
 */
proto.pb.Message.prototype.clearRealtime = function() {
  return this.setRealtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Message.prototype.hasRealtime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * @enum {number}
 */
proto.pb.BombTag = {
  REGULAR: 0,
  RTRIGGER: 1,
  WATERBOMB: 2,
  FIREBOMB: 3,
  TREEBOMB: 4,
  RADATION: 5,
  RRADATION: 6,
  RTREEBOMB: 7,
  TYPE8BOMB: 8,
  T9UKNOWN_BOMB: 9,
  T10UKNOWN_BOMB: 10,
  T11UKNOWN_BOMB: 11,
  T12UKNOWN_BOMB: 12,
  T13UKNOWN_BOMB: 13,
  T14UKNOWN_BOMB: 14,
  T15UKNOWN_BOMB: 15,
  T16UKNOWN_BOMB: 16,
  T17UKNOWN_BOMB: 17,
  SEX_BOMB: 18,
  SANTABOMB: 19,
  RUNNINGMINE: 20
};

/**
 * @enum {number}
 */
proto.pb.DropTag = {
  ADD_REGULAR: 0,
  ADD_RTRIGGER: 1,
  ADD_WATERBOMB: 2,
  ADD_PBOMB: 3,
  ADD_TREEBOMB: 4,
  ADD_RADATION: 5,
  ADD_RRADATION: 6,
  ADD_RTREEBOMB: 7,
  ADD_TYPE8BOMB: 8,
  ADD_T9UKNOWN_BOMB: 9,
  ADD_T10UKNOWN_BOMB: 10,
  ADD_T11UKNOWN_BOMB: 11,
  ADD_T12UKNOWN_BOMB: 12,
  ADD_T13UKNOWN_BOMB: 13,
  ADD_T14UKNOWN_BOMB: 14,
  ADD_T15UKNOWN_BOMB: 15,
  ADD_T16UKNOWN_BOMB: 16,
  ADD_T17UKNOWN_BOMB: 17,
  ADD_SEX_BOMB: 18,
  ADD_SANTABOMB: 19,
  ADD_RUNNINGMINE: 20,
  FLAG_RED: 30,
  FLAG_BLUE: 31,
  FLAG_GREEN: 32,
  FLAG_YELLOW: 33,
  FLAG_PURPLE: 34,
  FLAG_GUILD: 35,
  INC_SPEED: 40,
  INC_FIRE: 41,
  INC_BOMB: 42,
  ABLE_KICK: 44,
  ABLE_PICK: 45,
  ABLE_THROW: 46,
  ABLE_JUMP: 47,
  ABLE_GHOST: 48,
  ABLE_TOXIC: 49,
  GOLD_BAR: 70,
  SILV_BAR: 71,
  COPR_BAR: 72,
  COIN: 73,
  GOLD_BAR_UNDEAD: 74,
  SILV_BAR_UNDEAD: 75,
  COPR_BAR_UNDEAD: 76,
  COIN_UNDEAD: 77,
  HEART: 80,
  SHIELD: 81
};

/**
 * @enum {number}
 */
proto.pb.Tile = {
  SOLID: 0,
  BRICK: 1,
  EMPTY: 2,
  HOLE: 3,
  STAIR_UP: 4,
  STAIR_DOWN: 5,
  OUT_OF_BOUND: 6
};

/**
 * @enum {number}
 */
proto.pb.Sex = {
  M: 0,
  F: 1,
  O: 2
};

/**
 * @enum {number}
 */
proto.pb.PStatus = {
  NORMAL: 0,
  TOXIC: 1,
  DIZZY: 2,
  DRUNK: 3,
  JUMP: 4,
  CURSED: 5,
  DEAD: 6,
  STONED: 7,
  ON_SHIELD: 8
};

/**
 * @enum {number}
 */
proto.pb.UserInput = {
  CENTER: 0,
  LEFT: 1,
  RIGHT: 2,
  UP: 3,
  DOWN: 4,
  THRUST_ON: 5,
  THRUST_OFF: 6,
  STRAIGHT_FIRE_START: 7,
  TURRET_FIRE_START: 8,
  FIRE_STOP: 9,
  BOOST_ON: 10,
  BOOST_OFF: 11,
  BOMB_PLACE: 12,
  PUNCH_BOMB: 13
};

goog.object.extend(exports, proto.pb);
